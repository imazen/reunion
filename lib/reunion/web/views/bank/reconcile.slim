

h3 #{bank.name} &mdash; #{bank.currency}

ul
  - if bank.starting_balance && bank.starting_balance_date
    li Starting balance on #{bank.starting_balance_date.strftime("%Y-%m-%d")}: #{"%.2f" % bank.starting_balance}
  li Final discrepancy: #{ "%.2f" % bank.final_discrepancy }
  li Input files: #{bank.input_files.count}
  li Input transactions: #{bank.input_files.map{|f|f.transactions}.flatten.count}
  li Final txn count: #{bank.transactions.count}
  li Last transaction: #{bank.last_transaction_date}
  li Ending balance: #{"%.2f" % bank.ending_balance}
  li Last statement/reconciliation date: #{bank.last_balance_date ? bank.last_balance_date.strftime("%Y-%m-%d") : "None"}
  li 
    a onclick="javascript: $('.reconciliationreport tr.default').toggle();"
      | Hide/show regular transactions

ruby:
  @report = bank.reconciliation_report.map do |row|
    next nil if row.nil?
    r = {}.merge(row)
    r[:date] = r[:date].strftime("%Y-%m-%d")  if r[:date] 
    [:amount, :balance,:discrepancy].each do |key|
      r[key] = "%.2f" % r[key] if r[key]
    end
    r[:class] = r[:discrepancy] ? "danger" : r && r[:amount].nil? ? "info" : "default"
    r
  end.compact

table.table.table-condensed.reconciliationreport
  tr
    th Date
    th Amount
    th Balance
    th Discrep.
    th Description
    th Source
  - @report.each do |r|
    tr class=(r[:class])
      - [:date, :amount, :balance, :discrepancy, :description, :source].each do |key|
        td class="field_#{key}"
          - if (r[:key] && [:date, :amount, :description].include?(key))
            a href="/transaction/#{r[:key]}"
              = r[key]
          - elsif (key == :source && r[:source_digest])
            a href="/import/sources/#{r[:source_digest]}"
              = r[:source]
          - else
            = r[key]

     